
> be@1.0.0 dev
> tsc -b && node dist/index.js

We set up a simple Todo App using React, Tailwind CSS, and Lucide React icons. 

<boltArtifact id="todo-app" title="Todo App with React and Tailwind CSS">
  <boltAction type="file" filePath="package.json">
    {
      "name": "todo-app",
      "version": "0.0.0",
      "type": "module",
      "scripts": {
        "dev": "vite",
        "build": "vite build",
        "preview": "vite preview"
      },
      "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0"
      },
      "devDependencies": {
        "@vitejs/plugin-react": "^3.1.0",
        "vite": "^4.2.0",
        "tailwindcss": "^3.2.4",
        "autoprefixer": "^10.4.13",
        "lucide-react": "^0.0.6"
      }
    }
  </boltAction>

  <boltAction type="shell">
    npm install --yes
  </boltAction>

  <boltAction type="file" filePath="index.html">
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Todo App</title>
      </head>
      <body>
        <div id="root"></div>
        <script type="module" src="src/main.jsx"></script>
      </body>
    </html>
  </boltAction>

  <boltAction type="file" filePath="src/main.jsx">
    import React from 'react';
    import ReactDOM from 'react-dom/client';
    import App from './App';

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>
    );
  </boltAction>

  <boltAction type="file" filePath="src/App.jsx">
    import React, { useState } from 'react';
    import { Check, Plus } from 'lucide-react';

    function App() {
      const [todos, setTodos] = useState([]);
      const [newTodo, setNewTodo] = useState('');

      const handleAddTodo = () => {
        if (newTodo !== '') {
          setTodos([...todos, { text: newTodo, completed: false }]);
          setNewTodo('');
        }
      };

      const handleToggleCompleted = (index) => {
        const newTodos = [...todos];
        newTodos[index].completed = !newTodos[index].completed;
        setTodos(newTodos);
      };

      return (
        <div className="max-w-md mx-auto p-4 mt-12 bg-white rounded-lg shadow-lg">
          <h1 className="text-3xl font-bold mb-4">Todo App</h1>
          <div className="flex mb-4">
            <input
              type="text"
              value={newTodo}
              onChange={(e) => setNewTodo(e.target.value)}
              className="w-full p-2 pl-10 text-sm text-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-600"
              placeholder="Add new todo"
            />
            <button
              onClick={handleAddTodo}
              className="ml-2 bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg"
            >
              <Plus size={20} />
            </button>
          </div>
          <ul>
            {todos.map((todo, index) => (
              <li key={index} className="flex mb-2">
                <input
                  type="checkbox"
                  checked={todo.completed}
                  onChange={() => handleToggleCompleted(index)}
                  className="mr-2"
                />
                <span
                  className={`text-sm ${
                    todo.completed ? 'text-gray-500 line-through' : 'text-gray-700'
                  }`}
                >
                  {todo.text}
                </span>
              </li>
            ))}
          </ul>
        </div>
      );
    }

    export default App;
  </boltAction>

  <boltAction type="file" filePath="tailwind.config.js">
    module.exports = {
      content: [
        './index.html',
        './src/**/*.{js,ts,jsx,tsx}',
      ],
      theme: {
        extend: {},
      },
      plugins: [],
    };
  </boltAction>

  <boltAction type="file" filePath="postcss.config.js">
    module.exports = {
      plugins: {
        tailwindcss: {},
        autoprefixer: {},
      }
    };
  </boltAction>

  <boltAction type="shell">
    npx vite
  </boltAction>